package panel
package panel
package panel
package panel
package panel
package panel
package panel
package panel
stratum+tcp://kda.f2pool.com:5400
import "git.code.tencent.com/liuzhenqiang/ghgame_framework/util/gstring"

var AverageOnlineDurationSql = []byte(`
	SELECT 
		{sqlOutField}
		,IF(isNaN(sum(onlineTime)/sum(active_user_count) as t),0,if(isInfinite(t),1,round(t,2))) as number
	FROM
		(
		SELECT 
			{sqlField}
			,sum(online_time) as onlineTime 
		FROM 
			{CKTable} p 
			{sqlJoin}
		WHERE 
			{sqlWhere}
			 and event in {activeUserEventList}
		GROUP BY 
			{sqlGroup}
		ORDER BY {sqlGroup}	
	) a
	right join
	(
		SELECT 
			{sqlOutField}
			,count(DISTINCT {dimension}) active_user_count
		FROM 	
			(SELECT
				{sqlField}
				,{dimension}
				,count(DISTINCT toDate(event_time)) countDay
			FROM 
				{CKTable} p
				{sqlJoin}
			WHERE
				{sqlWhere}
				and event='login'
			GROUP BY 
				{sqlGroup} ,{dimension}  
			HAVING countDay>={countDay}
			ORDER BY dates
         )
		  GROUP BY {sqlOutGroup}  
		  ORDER BY {sqlOutGroup}
	) b
	on {sqlABJoinOn}
	GROUP BY
		{sqlOutGroup}
	ORDER BY 
		{sqlOutGroup}
`)

var AverageOnlineDurationColumnIndex = ""
var AverageOnlineDurationColumnName = "平均在线时长(s)"

// 平均在线时长 当日活跃用户数在线时长求和/活跃用户数
func ExploreAverageOnlineDuration(exploreHelper *ExploreHelper) (result ResultExplore, err error) {

	// 初始化
	result = ExploreInitData(exploreHelper)
	exploreHelper.ItemName = "averageOnlineDuration"

	// 构建sql
	exploreHelper.Sql = gstring.BytesToString(AverageOnlineDurationSql)
	ExploreBuildSql(exploreHelper)

	// 执行sql
	ExploreRunSql(exploreHelper)

	// 构建数据
	result.Y = ExploreBuildOneColumnData(AverageOnlineDurationColumnName, exploreHelper)

	// 列指标
	result.ColumnIndex = []string{AverageOnlineDurationColumnIndex}

	// 列名称
	result.Indicators = ExploreBuildOneIndicators(AverageOnlineDurationColumnName, exploreHelper)

	return
}

import (
	"git.code.tencent.com/liuzhenqiang/ghgame_framework/util/gslice"
	"git.code.tencent.com/liuzhenqiang/ghgame_framework/util/gstring"
	"github.com/spf13/cast"

	"strings"
)

var SecondaryRetentionSql = []byte(`
	SELECT
		{retentionSelectDate}
        IF(isNaN(sum(r[2])/sum(r[1]) as t) ,0,IF(isInfinite(t),1,round(t,4))) number
		{sqlFieldNoDates}
	FROM
        (
        	SELECT
                {sqlOutField}
				,{todayRetention}
				,{dimension}
        	FROM
                (
                	SELECT	
						{joinDates}
						{sqlOutField},
                        account_day,
                        event,
                        {dimension}
                	FROM
                        (
                        SELECT
							{sqlField}
							,{dimension}
							,event
							,{accountDay}  account_day
                        FROM
							{CKTable} p
							{sqlJoin} 	
                        WHERE
							event in ('login','create_role','register')
							{sqlWhereNoDates}
							{retentionDate}
                        )
				)
        	GROUP BY
                {sqlOutGroup},{dimension}
  		)
	GROUP BY
        {sqlOutGroup}
	ORDER BY
        {sqlOutGroup}
`)

var SecondaryRetentionColumnIndex = ""
var SecondaryRetentionColumnName = "次留"

// 次日留存：次留=第1天还活跃的当天(第0天)新增用户数 / 选取日当天（第0天）新增用户数
//         次留=第1天还活跃的当天(第0天)创角用户数/ 选取日当天（第0天）创角用户数----（角色id维度）
func ExploreSecondaryRetention(exploreHelper *ExploreHelper) (result ResultExplore, err error) {
	if gslice.ContainString([]string{"byQuarter", "byYear"}, exploreHelper.ByTime) {
		exploreHelper.ExecMark = true
	}

	// 初始化
	result = ExploreInitData(exploreHelper)

	ExploreSecondaryRetentionBuildSql(exploreHelper)
	// 执行sql
	if err = ExploreRunSql(exploreHelper); err != nil {
		return
	}
	// 构建数据
	result.Y = ExploreBuildOneColumnData(SecondaryRetentionColumnName, exploreHelper)

	// 列指标
	result.ColumnIndex = []string{SecondaryRetentionColumnIndex}

	// 列名称
	result.Indicators = ExploreBuildOneIndicators(SecondaryRetentionColumnName, exploreHelper)

	return
}
func ExploreSecondaryRetentionBuildSql(exploreHelper *ExploreHelper) {
	exploreHelper.Sql = gstring.BytesToString(SecondaryRetentionSql)
	joinDates := ""
	todayRetention := ""
	secondRetention := ""
	accountDay := ""
	// 角色id维度用create_role事件 其他的用注册事件
	eventStr := "register"
	if exploreHelper.Dimension == "role_id" {
		eventStr = "create_role"
	}
	dateWord := ""
	retentionSelectDate:=""
	if exploreHelper.ByTime == "byDay" {
		joinDates = "arrayJoin(arrayMap(d -> addDays(toDate('{startDate}'), d),range({retainedCountDay})) as arr_ftime) as dates,"
		todayRetention = "retention(account_day = dates and event = '{eventStr}',account_day = addDays(dates, {retentionDay}) and event = 'login')as r"
		secondRetention = "retention(account_day = addDays(dates, 1) and event = 'register',account_day = addDays(dates, 1))as r1"
		accountDay = "toDate(event_time)"
		dateWord = "addDays"
		retentionSelectDate="toDate(dates) as dates,"
	}
	if exploreHelper.ByTime == "byWeek" {
		joinDates = "arrayJoin(arrayMap(d -> addWeeks(toStartOfWeek(toDate('{startDate}'),1), d),range({retainedCountDay})) as arr_ftime) as dates,"
		todayRetention = "retention(account_day = dates and event = '{eventStr}',account_day = addWeeks(dates, {retentionDay}) and event = 'login')as r"
		secondRetention = "retention(account_day = addWeeks(dates, 1) and event = 'register',account_day = addWeeks(dates, 1))as r1"
		accountDay = "toStartOfWeek(toDate(event_time),1) "
		dateWord = "addWeeks"
		retentionSelectDate="toYearWeek(toDateTime(FROM_UNIXTIME( dates, '%Y-%m-%d' )),1) as dates,"
	}
	if exploreHelper.ByTime == "byMonth" {
		joinDates = "arrayJoin(arrayMap(d -> addMonths(toStartOfMonth(toDate('{startDate}')), d),range({retainedCountDay})) as arr_ftime) as dates,"
		todayRetention = "retention(account_day = dates and event = '{eventStr}',account_day = addMonths(dates, {retentionDay}) and event = 'login')as r"
		secondRetention = "retention(account_day = addMonths(dates, 1) and event = 'register',account_day = addMonths(dates, 1))as r1"
		accountDay = "toStartOfMonth(toDate(event_time)) "
		dateWord = "addMonths"
		retentionSelectDate="FROM_UNIXTIME( dates, '%Y-%m' ) as dates,"
	}
	retentionDate:=" and toDate(event_time)>="+exploreHelper.CkStartDate
	// 次留因为要算7留也算到第7天
	retentionDate += " and toDate(event_time)<=toDate(" + dateWord + "(" + exploreHelper.CkEndDate + ", 7))"


	retainedCountDay := "toUInt32(dateDiff('day',toDate('{startDate}'),toDate('{endDate}'))+7)"
	exploreHelper.Sql = strings.ReplaceAll(exploreHelper.Sql, "{todayRetention}", todayRetention)
	exploreHelper.Sql = strings.ReplaceAll(exploreHelper.Sql, "{secondRetention}", secondRetention)
	exploreHelper.Sql = strings.ReplaceAll(exploreHelper.Sql, "{accountDay}", accountDay)
	exploreHelper.Sql = strings.ReplaceAll(exploreHelper.Sql, "{joinDates}", joinDates)
	exploreHelper.Sql = strings.ReplaceAll(exploreHelper.Sql, "{retainedCountDay}", retainedCountDay)
	exploreHelper.Sql = strings.ReplaceAll(exploreHelper.Sql, "{eventStr}", eventStr)
	exploreHelper.Sql = strings.ReplaceAll(exploreHelper.Sql, "{retentionDay}", cast.ToString(exploreHelper.RetentionDay))
	exploreHelper.Sql = strings.ReplaceAll(exploreHelper.Sql, "{retentionDate}", retentionDate)
	exploreHelper.Sql = strings.ReplaceAll(exploreHelper.Sql, "{retentionSelectDate}", retentionSelectDate)


	ExploreBuildSql(exploreHelper)
	return
}

import (
	"strings"
	"wt/econ/api/app/provider/public"

	"git.code.tencent.com/liuzhenqiang/ghgame_framework/util/gslice"
	"git.code.tencent.com/liuzhenqiang/ghgame_framework/util/gstring"
	"github.com/spf13/cast"
)

var LtvBaseData = []byte(`
	SELECT
		{fDateList}
		,account_day
		,{dimension}
		,event
		,pay_price/100 as pay_price
		{sqlFieldNoDates}
	FROM
		(
		SELECT
			{sqlField}
			,pay_price
			,event
			,{dimension}
			,{accountDay} account_day
		FROM 
			{CKTable} p
			{sqlJoin}
		WHERE  
			{sqlWhere}
			and event in {ltvEventList}
		)	
`)

var LtvItemDay = []byte(` left join
	(SELECT
		{fDate}
		,sum(pay_amount_{day})  pay_total_{day} 
		,sum(payList[2])  pay_user_count_{day}
		{sqlFieldNoDates}
	FROM
		(
		SELECT
			fdate
    		,{dimension}
			,sumIf(pay_price,account_day = {dateWord}(fdate,{day}) and event='deliver_goods')  pay_amount_{day}
			,retention(account_day = fdate and event='{ltvFirstEvent}',account_day = {dateWord}(fdate,{day}) and event='deliver_goods' ) as payList
			{sqlFieldNoDates}
		FROM 
			baseData
		GROUP BY {dimension},fdate {sqlFieldNoDates}
		HAVING payList[2]>0 
		)
	GROUP BY fdate {sqlFieldNoDates}
	ORDER BY fdate) a_{day} 
`)
var LtvSqlNew = []byte(`
	with baseData as ({baseData})
	SELECT
         {ltvSelectField}
		,sum(a.register_user_count) as register_user_count
		,{payTotalField}	
		,{payUserCountField}
		,{ltvField}
		
	FROM
		(
			select dates {sqlFieldNoDates},count(distinct({dimension})) as register_user_count 
			
			from
				(SELECT 
					{sqlField}
					,{dimension}
				FROM
					{CKTable} p 
					{sqlJoin}
				WHERE
					{sqlWhere}
					and event='{ltvFirstEvent}'
				ORDER BY {dimension} limit 1 by dates,{dimension}
				)
			GROUP BY {sqlGroup}
		 	ORDER BY {sqlGroup}
		) a
	
		{LtvItemDaySql}
	GROUP BY {sqlOutGroup}
	ORDER BY {sqlOutGroup}
`)
var LtvColumnIndexNew = ""
var LtvColumnNameNew = "LtvNew"

// 探索-LtvNew  LTV=第0日注册用户在第N日的总收入/第0日的注册用户数
func ExploreLtvNew(exploreHelper *ExploreHelper) (result ResultExplore, err error) {
	if gslice.ContainString([]string{"byQuarter", "byYear"}, exploreHelper.ByTime) {
		return
	}

	// 初始化
	result = ExploreInitData(exploreHelper)

	zList, columnIndex := ExploreLtvBuildSqlNew(exploreHelper)
	// 执行sql
	if err = ExploreRunSql(exploreHelper); err != nil {
		return
	}
	// 留存
	RetainedList := ExploreBuildLtvDataNew("retained", zList, exploreHelper)
	// 构建流失 case_total-case_0
	lossDataList := make([]map[string]interface{}, 0)
	for _, value := range exploreHelper.ResultList {
		tempData := value
		for i := 0; i <= exploreHelper.RetainedCount; i++ {
			tempData["case_"+cast.ToString(i)] = cast.ToString(cast.ToInt(value["register_user_count"]) - cast.ToInt(value["retain_"+cast.ToString(i)]))
		}
		lossDataList = append(lossDataList, tempData)
	}

	exploreHelper.ResultList = lossDataList
	lostList := ExploreBuildLtvDataNew("loss", zList, exploreHelper)
	resultYList := make([][]map[string][]ResultExploreYList, 0)
	resultYList = append(resultYList, RetainedList)
	resultYList = append(resultYList, lostList)

	// 构建数据
	result.Y = resultYList
	result.ColumnIndex = columnIndex
	result.Indicators = zList
	result.Z = result.Indicators

	return
}

func ExploreLtvBuildSqlNew(exploreHelper *ExploreHelper) (zList []string, columnIndex []string) {
	ltvEventList := "('register','deliver_goods')"
	ltvFirstEvent := "register"
	if exploreHelper.Dimension == "role_id" {
		ltvEventList = "('create_role','deliver_goods')"
		ltvFirstEvent = "create_role"
	}
	zList = append(zList, "账号注册用户数")
	unit := "日"
	dateWord := "addDays"
	payAmountList := ""
	retainedList := "retention(account_day = fdate and event='register'"
	retainField := ""
	payTotalField := ""
	ltvField := ""
	payUserList := "retention(account_day = fdate and event='register'"
	payUserCountField := ""
	if exploreHelper.ByTime == "byWeek" {
		unit = "周"
		dateWord = "addWeeks"
	}
	if exploreHelper.ByTime == "byMonth" {
		unit = "月"
		dateWord = "addMonths"
	}
	zList = append(zList, "当"+unit)
	columnIndex = append(columnIndex, "register_user_count")
	abJoinOn := "toString(a.dates)=toString(a_{day}.dates) "
	ltvSelectField := "a.dates as dates"
	for _, value := range exploreHelper.GroupField {
		tempField := strings.ReplaceAll(value, ".", "_")
		abJoinOn += " and a." + tempField + " = a_{day}." + tempField
		ltvSelectField += ",a." + tempField + " " + tempField
	}
	abJoinOn = strings.TrimRight(abJoinOn, "and")
	ltvSql := gstring.BytesToString(LtvSqlNew)
	itemSql := ""
	// exploreHelper.RetainedCount = 1
	for i := 0; i <= exploreHelper.RetainedCount; i++ {
		LtvItemDaySql := gstring.BytesToString(LtvItemDay)
		zList = append(zList, "第"+cast.ToString(i+1)+unit)
		columnIndex = append(columnIndex, "")
		LtvItemDaySql += " on " + abJoinOn
		LtvItemDaySql = strings.ReplaceAll(LtvItemDaySql, "{day}", cast.ToString(i))
		itemSql += LtvItemDaySql

		payAmountList += ",sumIf(pay_price,account_day = {dateWord}(fdate," + cast.ToString(i) + ") and event='deliver_goods')  pay_amount_" + cast.ToString(i)
		retainedList += ",account_day = {dateWord}(fdate," + cast.ToString(i) + ")"
		payUserList += ",account_day = {dateWord}(fdate," + cast.ToString(i) + ") and event='deliver_goods'"

		retainField += ",sum(retainList[" + cast.ToString(i+1) + "])  retain_" + cast.ToString(i)
		payTotalField += "sum(pay_total_" + cast.ToString(i) + ")  pay_total_" + cast.ToString(i) + ","
		ltvField += ",IF(register_user_count=0 or pay_user_count_" + cast.ToString(i) + "=0,0,IF(isNaN(pay_total_" + cast.ToString(i) + "/register_user_count as tt_" + cast.ToString(i) + "),0,IF(isInfinite(tt_" + cast.ToString(i) + "),1,round(tt_" + cast.ToString(i) + ",2)) )) ltv_" + cast.ToString(i)
		payUserCountField += "sum(pay_user_count_" + cast.ToString(i) + ")  pay_user_count_" + cast.ToString(i) + ","

	}
	ltvSql = strings.ReplaceAll(ltvSql, "{LtvItemDaySql}", itemSql)
	ltvSql = strings.ReplaceAll(ltvSql, "{baseData}", gstring.BytesToString(LtvBaseData))
	zList = zList[0 : len(zList)-1]
	retainedList += ") as retainList"
	payUserList += ") as payList"
	retainedCountDay := "toUInt32(dateDiff('day',toDate('{startDate}'),toDate('{endDate}'))+" + cast.ToString(exploreHelper.RetainedCount) + ")"

	ltvSql = strings.ReplaceAll(ltvSql, "{payAmountList}", strings.TrimLeft(payAmountList, ","))
	ltvSql = strings.ReplaceAll(ltvSql, "{retainedList}", strings.TrimLeft(retainedList, ","))
	ltvSql = strings.ReplaceAll(ltvSql, "{payUserList}", strings.TrimLeft(payUserList, ","))
	ltvSql = strings.ReplaceAll(ltvSql, "{payTotalField}", strings.TrimRight(payTotalField, ","))
	ltvSql = strings.ReplaceAll(ltvSql, "{payUserCountField}", strings.TrimRight(payUserCountField, ","))
	ltvSql = strings.ReplaceAll(ltvSql, "{retainField}", strings.TrimLeft(retainField, ","))
	ltvSql = strings.ReplaceAll(ltvSql, "{ltvField}", strings.TrimLeft(ltvField, ","))
	ltvSql = strings.ReplaceAll(ltvSql, "{dateWord}", dateWord)
	fDateList, fDate, accountDay := ExploreFDate(exploreHelper)
	ltvSql = strings.ReplaceAll(ltvSql, "{fDateList}", fDateList)
	ltvSql = strings.ReplaceAll(ltvSql, "{fDate}", fDate)
	ltvSql = strings.ReplaceAll(ltvSql, "{accountDay}", accountDay)
	ltvSql = strings.ReplaceAll(ltvSql, "{retainedCountDay}", retainedCountDay)
	ltvSql = strings.ReplaceAll(ltvSql, "{ltvSelectField}", ltvSelectField)
	ltvSql = strings.ReplaceAll(ltvSql, "{ltvEventList}", ltvEventList)
	ltvSql = strings.ReplaceAll(ltvSql, "{ltvFirstEvent}", ltvFirstEvent)
	exploreHelper.Sql = ltvSql
	ExploreBuildSql(exploreHelper)

	return
}
func ExploreBuildLtvDataNew(types string, sqlFieldList []string, exploreHelper *ExploreHelper) (resultList []map[string][]ResultExploreYList) {
	tempDateGroupList := ExploreBuildResultToDateGroup(exploreHelper)
	// 按照日期区间组装数据
	for dateKey, dateItem := range exploreHelper.DateList {
		tempDateList := make(map[string][]ResultExploreYList, 0)
		tempYList := make([]ResultExploreYList, 0)

		// 处理总体
		tempAmountList := make([]float64, len(sqlFieldList))
		tempZList := make([]int, len(sqlFieldList))
		tempZList1 := make([]int, len(sqlFieldList))
		tempTotal := 0
		tempY := ResultExploreYList{}
		tempY.GroupNum = len(exploreHelper.GroupField)
		tempY.GroupCols = []string{"总体"}
		for _, resItem := range tempDateGroupList[cast.ToString(dateItem)] {
			// 按季度取消后面的'季度
			resItem["dates"] = strings.TrimRight(cast.ToString(resItem["dates"]), "季度")
			if cast.ToString(resItem["dates"]) == cast.ToString(dateItem) {
				tempTotal += cast.ToInt(resItem["register_user_count"])

				for zKey, _ := range sqlFieldList[1:] {
					tempAmountList[zKey] += cast.ToFloat64(resItem["pay_total_"+cast.ToString(zKey)])
					if types == "retained" {
						tempCaseField := "ltv_" + cast.ToString(zKey)
						tempCaseField1 := "pay_user_count_" + cast.ToString(zKey)
						tempZList[zKey] += cast.ToInt(resItem[tempCaseField])
						tempZList1[zKey] += cast.ToInt(resItem[tempCaseField1])
					} else {
						// 流失计算的未付费用户
						tempCaseField := "pay_user_count_" + cast.ToString(zKey)
						tempZList[zKey] += cast.ToInt(resItem["register_user_count"]) - cast.ToInt(resItem[tempCaseField])
					}
					// tempTotalPayAmount += cast.ToFloat64(resItem["pay_amount_"+cast.ToString(zKey)])
				}

			}
		}
		tempY.TotalNum = cast.ToString(tempTotal)
		tempY.Values = append(tempY.Values, cast.ToString(tempTotal))
		// 付费用户
		tempY.OtherValues = append(tempY.OtherValues, cast.ToString(tempTotal))
		tempY.ExtendValues = append(tempY.ExtendValues, cast.ToString(tempTotal))
		for key, _ := range sqlFieldList[1:] {

			// Values ltv
			tempVal := ""
			if cast.ToInt(tempZList1[key]) > 0 && cast.ToInt(tempAmountList[key]) > 0 && cast.ToInt(tempTotal) > 0 {
				tempVal = cast.ToString(public.Decimal(tempAmountList[key] / cast.ToFloat64(tempTotal)))
			}
			tempVal = ExploreTimeGtDate(exploreHelper, key, dateKey, dateItem, PadRightZero(tempVal, 2))
			tempY.Values = append(tempY.Values, tempVal)

			//  OtherValues 付费用户数
			tempVal1 := cast.ToString(tempZList1[key])
			tempVal1 = ExploreTimeGtDate(exploreHelper, key, dateKey, dateItem, tempVal1)
			tempY.OtherValues = append(tempY.OtherValues, tempVal1)

			// extendValues 付费金额
			tempVal2 := cast.ToString(tempAmountList[key])
			tempVal2 = ExploreTimeGtDate(exploreHelper, key, dateKey, dateItem, PadRightZero(tempVal2, 2))
			tempY.ExtendValues = append(tempY.ExtendValues, tempVal2)
		}
		if types == "retained" {
			// 百分比为付费用户的百分比
			tempY.PercentValues = BuildPercentValues(cast.ToFloat64(tempY.TotalNum), tempY.OtherValues)
		} else {
			// 百分比为未付费用户用户的百分比
			tempY.PercentValues = BuildPercentValues(cast.ToFloat64(tempY.TotalNum), tempY.Values)
			tempY.OtherValues = []string{}
		}

		tempYList = append(tempYList, tempY)
		// 处理分组
		for _, groupItem := range exploreHelper.UnionGroups {
			tempY := ResultExploreYList{}
			tempY.GroupNum = len(groupItem)
			tempY.GroupCols = groupItem
			tempTotal := 0
			tempZList := make([]float64, len(sqlFieldList))
			tempZList1 := make([]int, len(sqlFieldList))
			tempAmountList := make([]float64, len(sqlFieldList))
			for _, resItem := range tempDateGroupList[cast.ToString(dateItem)] {
				// 按季度取消后面的'季度
				resItem["dates"] = strings.TrimRight(cast.ToString(resItem["dates"]), "季度")
				if cast.ToString(resItem["dates"]) == cast.ToString(dateItem) {
					tempGroupMark := make([]bool, len(exploreHelper.GroupField))
					if len(groupItem) == len(exploreHelper.GroupField) {
						for k, filed := range exploreHelper.GroupField {
							filed = strings.ReplaceAll(filed, "p.", "")
							filedValue := public.GetInterfaceToString(resItem[filed])
							if filedValue == "" {
								filedValue = "(null)"
							}
							if groupItem[k] == filedValue {
								tempGroupMark[k] = true
							}
						}
					}

					tempMark := 0
					for _, value := range tempGroupMark {
						if value == true {
							tempMark++
						}
					}
					if tempMark == len(tempGroupMark) {
						tempTotal += cast.ToInt(resItem["register_user_count"])
						for zKey, _ := range sqlFieldList[1:] {
							if types == "retained" {
								tempCaseField := "ltv_" + cast.ToString(zKey)
								tempCaseField1 := "pay_user_count_" + cast.ToString(zKey)
								tempZList[zKey] += cast.ToFloat64(resItem[tempCaseField])
								tempZList1[zKey] += cast.ToInt(resItem[tempCaseField1])
								tempAmountList[zKey] += cast.ToFloat64(resItem["pay_total_"+cast.ToString(zKey)])
							} else {
								// 流失计算的未付费用户
								tempCaseField := "pay_user_count_" + cast.ToString(zKey)
								tempZList[zKey] += cast.ToFloat64(cast.ToInt(resItem["register_user_count"]) - cast.ToInt(resItem[tempCaseField]))
							}
						}
					}
				}
			}
			tempY.TotalNum = cast.ToString(tempTotal)
			tempY.Values = append(tempY.Values, cast.ToString(tempTotal))
			tempY.OtherValues = append(tempY.OtherValues, cast.ToString(tempTotal))
			tempY.ExtendValues = append(tempY.ExtendValues, cast.ToString(tempTotal))
			for key, _ := range sqlFieldList[1:] {
				tempVal := cast.ToString(tempZList[key])
				tempVal = ExploreTimeGtDate(exploreHelper, key, dateKey, dateItem, PadRightZero(tempVal, 2))
				tempY.Values = append(tempY.Values, tempVal)

				tempVal1 := cast.ToString(tempZList1[key])
				tempVal1 = ExploreTimeGtDate(exploreHelper, key, dateKey, dateItem, tempVal1)
				tempY.OtherValues = append(tempY.OtherValues, tempVal1)

				// extendValues 付费金额
				tempVal2 := cast.ToString(tempAmountList[key])
				tempVal2 = ExploreTimeGtDate(exploreHelper, key, dateKey, dateItem, PadRightZero(tempVal2, 2))
				tempY.ExtendValues = append(tempY.ExtendValues, tempVal2)

			}
			if types == "retained" {
				// 百分比为付费用户的百分比
				tempY.PercentValues = BuildPercentValues(cast.ToFloat64(tempY.TotalNum), tempY.OtherValues)
			} else {
				// 百分比为未付费用户用户的百分比
				tempY.PercentValues = BuildPercentValues(cast.ToFloat64(tempY.TotalNum), tempY.Values)
				tempY.OtherValues = []string{}
			}
			tempYList = append(tempYList, tempY)
		}
		// 按周的处理
		if exploreHelper.ByTime == "byWeek" {
			dateItem = exploreHelper.DateList1[dateKey]
		}
		tempDateList[dateItem] = tempYList
		resultList = append(resultList, tempDateList)
	}
	return
}

import (
	"strings"

	"git.code.tencent.com/liuzhenqiang/ghgame_framework/util/gslice"
	"git.code.tencent.com/liuzhenqiang/ghgame_framework/util/gstring"
	"github.com/spf13/cast"
)

var RetainedSql = []byte(`
SELECT
	
	{selectFdate}		
	{RetainedCase}
	{outGroup}
FROM
	(
	SELECT
		
		fdate,
		{dimension},
		{RetainedRetention}
		{outGroup}
	FROM
		(
		SELECT
			{fdate}
			account_day, 
			event,
			{dimension}
			{outGroup}
		FROM
			(
			SELECT
				{sqlField}
				,{dimension}
				,event
				,{accountDay} account_day
			FROM
				{CKTable} p
				{sqlJoin}
			WHERE
				{sqlWhere}
				and event in ('register','login')
			)
)
	GROUP BY
		fdate,
		{dimension} 
		{outGroup}
  )
GROUP BY
	dates {outGroup}
ORDER BY
	dates
`)

var RetainedColumnIndex = ""
var RetainedColumnName = "留存"

// 探索--留存
func ExploreRetained(exploreHelper *ExploreHelper) (result ResultExplore, err error) {
	if gslice.ContainString([]string{"byQuarter", "byYear"}, exploreHelper.ByTime) {
		return
	}

	// 初始化
	result = ExploreInitData(exploreHelper)

	zList := make([]string, 0)
	RetainedColumnIndex := make([]string, 0)
	zList, sqlFieldList, RetainedColumnIndex := ExploreRetainedBuildSql(exploreHelper)
	// 执行sql
	if err = ExploreRunSql(exploreHelper); err != nil {
		return
	}
	// 留存
	RetainedList := ExploreBuildMoreColumnData(sqlFieldList, exploreHelper)
	// 构建流失 case_total-case_0
	lossDataList := make([]map[string]interface{}, 0)
	for _, value := range exploreHelper.ResultList {
		tempData := value
		for i := 0; i <= exploreHelper.RetainedCount; i++ {
			tempData["case_"+cast.ToString(i)] = cast.ToString(cast.ToInt(value["case_total"]) - cast.ToInt(value["case_"+cast.ToString(i)]))
		}
		lossDataList = append(lossDataList, tempData)
	}

	exploreHelper.ResultList = lossDataList
	lostList := ExploreBuildMoreColumnData(sqlFieldList, exploreHelper)
	resultYList := make([][]map[string][]ResultExploreYList, 0)
	resultYList = append(resultYList, RetainedList)
	resultYList = append(resultYList, lostList)
	// 构建数据
	result.Y = resultYList
	result.ColumnIndex = RetainedColumnIndex
	result.Indicators = zList
	result.Z = result.Indicators

	return
}
func ExploreRetainedBuildSql(exploreHelper *ExploreHelper) (zList, sqlFieldList, RetainedColumnIndex []string) {
	RetainedSql := gstring.BytesToString(RetainedSql)
	RetainedCase := "sum(r[" + cast.ToString(1) + "]) case_total,"
	RetainedRetention := "retention(account_day = fdate and event = 'register'"
	RetainedColumnIndex = append(RetainedColumnIndex, "register_user_count")
	zList = append(zList, "账号注册用户数")
	for i := 0; i <= exploreHelper.RetainedCount; i++ {
		columnKey := "case_" + cast.ToString(i)
		RetainedCase += "sum(r[" + cast.ToString(i+2) + "]) case_" + cast.ToString(i) + ","

		unit := "日"
		if exploreHelper.ByTime == "byDay" {
			RetainedRetention += ",account_day = addDays(fdate, " + cast.ToString(i) + ") and event='login'"
		}
		if exploreHelper.ByTime == "byWeek" {
			unit = "周"
			RetainedRetention += ",account_day = addWeeks(fdate, " + cast.ToString(i) + ") and event='login'"
		}
		if exploreHelper.ByTime == "byMonth" {
			unit = "月"
			RetainedRetention += ",account_day = addMonths(fdate, " + cast.ToString(i) + ") and event='login'"
		}
		if i == 0 {
			zList = append(zList, "当"+unit)
		} else {
			zList = append(zList, "第"+cast.ToString(i)+unit)
		}
		sqlFieldList = append(sqlFieldList, columnKey)
		RetainedColumnIndex = append(RetainedColumnIndex, cast.ToString(i))

	}
	RetainedRetention += ")as r"

	//
	addDate := ""
	accountDay := ""
	fdate := ""
	selectFdate := ""
	if exploreHelper.ByTime == "byDay" {
		addDate = "addDays"
		accountDay = "toDate(event_time)"
		fdate = "arrayJoin(arrayMap(d -> addDays(toDate('{startDate}'), d),range({retainedCountDay})) as arr_ftime) as fdate,"
		selectFdate = "toString(fdate) as dates,"
	}
	if exploreHelper.ByTime == "byWeek" {
		addDate = "addWeeks"
		accountDay = "toStartOfWeek(toDate(event_time),1) "
		fdate = "arrayJoin(arrayMap(d -> addWeeks(toStartOfWeek(toDate('{startDate}'),1), d),range({retainedCountDay})) as arr_ftime) as fdate,"
		selectFdate = "toString(toYearWeek(fdate,1)) as dates,"
	}
	if exploreHelper.ByTime == "byMonth" {
		addDate = "addMonth"
		accountDay = "toStartOfMonth(toDate(event_time)) "
		fdate = "arrayJoin(arrayMap(d -> addMonths(toStartOfMonth(toDate('{startDate}')), d),range({retainedCountDay})) as arr_ftime) as fdate,"
		selectFdate = "substring(toString(fdate),1,7) as dates,"
	}

	// 没有dates字段
	sqlGroup := ""
	outGroup := ""
	for _, value := range strings.Split(exploreHelper.SqlGroup, ",")[1:] {
		sqlGroup += value + ","
		value := strings.ReplaceAll(value, "p.", "")

		outGroup += "," + value

	}
	if sqlGroup != "" {
		sqlGroup = "GROUP BY " + strings.TrimRight(sqlGroup, ",")
	}
	retainedCountDay := "toUInt32(dateDiff('day',toDate('{startDate}'),toDate('{endDate}'))+{retainedCount})"
	RetainedSql = strings.ReplaceAll(RetainedSql, "{selectFdate}", selectFdate)
	RetainedSql = strings.ReplaceAll(RetainedSql, "{fdate}", fdate)
	RetainedSql = strings.ReplaceAll(RetainedSql, "{RetainedCase}", strings.TrimRight(RetainedCase, ","))
	RetainedSql = strings.ReplaceAll(RetainedSql, "{RetainedRetention}", RetainedRetention)
	RetainedSql = strings.ReplaceAll(RetainedSql, "{retainedCountDay}", retainedCountDay)
	RetainedSql = strings.ReplaceAll(RetainedSql, "{startDate}", exploreHelper.StartDate)
	RetainedSql = strings.ReplaceAll(RetainedSql, "{endDate}", exploreHelper.EndDate)

	RetainedSql = strings.ReplaceAll(RetainedSql, "{addDate}", addDate)
	RetainedCount := exploreHelper.RetainedCount
	RetainedSql = strings.ReplaceAll(RetainedSql, "{retainedCount}", cast.ToString(RetainedCount+1))

	RetainedSql = strings.ReplaceAll(RetainedSql, "{accountDay}", accountDay)
	RetainedSql = strings.ReplaceAll(RetainedSql, "{sqlField}", exploreHelper.SqlField)
	RetainedSql = strings.ReplaceAll(RetainedSql, "{sqlWhere}", exploreHelper.SqlWhere)
	RetainedSql = strings.ReplaceAll(RetainedSql, "{sqlGroup}", sqlGroup)
	RetainedSql = strings.ReplaceAll(RetainedSql, "{sqlJoin}", exploreHelper.SqlJoin)
	RetainedSql = strings.ReplaceAll(RetainedSql, "{outGroup}", outGroup)
	RetainedSql = strings.ReplaceAll(RetainedSql, "{CKTable}", GetCkTableByGameId(exploreHelper.GameId))
	exploreHelper.Sql = RetainedSql
	ExploreBuildSql(exploreHelper)
	return
}

var retainedUserListSql = []byte(`
	SELECT 
		DISTINCT {dimension}
	FROM
	(
		with
   		'{currentDate}' as currentDate
		SELECT
			{dimension}
			,retention({accountDay} = currentDate and event = 'register',
				  {accountDay} = {addDate}(toDate(currentDate),{caseColumn}) and event='login'
          	) as r
 		FROM 
			{CKTable} p        
 			{BuildJoin}
		WHERE 
			event in ('login','register') 
	 	GROUP BY {dimension}
 		HAVING r[2]=1
 		
 	)
`)

func GetRetainedUserIdListSql(userHelper UserListHelper) (sql string, err error) {
	if gslice.ContainString([]string{"byQuarter", "byYear"}, userHelper.ByTime) {
		return
	}
	sql = gstring.BytesToString(retainedUserListSql)
	addDate := ""
	accountDay := ""
	if userHelper.ByTime == "byDay" {
		addDate = "addDays"
		accountDay = "toDate(event_time)"
	}
	if userHelper.ByTime == "byWeek" {
		addDate = "addWeeks"
		accountDay = "toStartOfWeek(toDate(event_time),1) "
	}
	if userHelper.ByTime == "byMonth" {
		addDate = "addMonths"
		accountDay = "toStartOfMonth(toDate(event_time)) "
		userHelper.SliceDate += "-01"
	}
	sql = strings.ReplaceAll(sql, "{currentDate}", userHelper.SliceDate)
	sql = strings.ReplaceAll(sql, "{addDate}", addDate)
	sql = strings.ReplaceAll(sql, "{caseColumn}", userHelper.ColumnIndex)
	sql = strings.ReplaceAll(sql, "{BuildJoin}", userHelper.BuildJoin)
	sql = strings.ReplaceAll(sql, "{CKTable}", GetCkTableByGameId(userHelper.GameId))
	sql = strings.ReplaceAll(sql, "{accountDay}", accountDay)

	return
}

import (
	"git.code.tencent.com/liuzhenqiang/ghgame_framework/util/gstring"
)

var PayTotalAmountSql = []byte(`
	SELECT 
		{sqlField}
		,round(sum(pay_price/100),2) as number
	FROM
		{CKTable} p 
		{sqlJoin}
	WHERE
		{sqlWhere}
		and event='deliver_goods'
	GROUP BY {sqlGroup}
	ORDER BY {sqlGroup}
`)

var PayTotalAmountColumnIndex = ""
var PayTotalAmountColumnName = "付费总金额(美元)"

// 探索-付费总金额
func ExplorePayTotalAmount(exploreHelper *ExploreHelper) (result ResultExplore, err error) {

	// 初始化
	result = ExploreInitData(exploreHelper)

	// 构建sql
	exploreHelper.Sql = gstring.BytesToString(PayTotalAmountSql)
	ExploreBuildSql(exploreHelper)

	// 执行sql
	ExploreRunSql(exploreHelper)

	// 构建数据
	result.Y = ExploreBuildOneColumnData(PayTotalAmountColumnName, exploreHelper)

	// 列指标
	result.ColumnIndex = []string{PayTotalAmountColumnIndex}

	// 列名称
	result.Indicators = ExploreBuildOneIndicators(PayTotalAmountColumnName, exploreHelper)

	return
}

import (
	"git.code.tencent.com/liuzhenqiang/ghgame_framework/util/gstring"
)

var NewAddPayRateSql = []byte(`
	SELECT
		{sqlOutField}
		,round(sum(new_pay_user_count)/sum(register_user_count),4) as number
	FROM
		(
		SELECT
			{sqlOutField}
			,count(DISTINCT {dimension}) as new_pay_user_count
		FROM
		 	(	
			SELECT
				{sqlField}
				,{dimension}
				,retention(event = 'register', event = 'deliver_goods') as r
			FROM 	
				{CKTable} p
				{sqlJoin}
			WHERE
				{sqlWhere}
				and event in ('register','deliver_goods')
			GROUP BY
				{sqlGroup} ,{dimension} 
			HAVING  r[1]>0 and r[2]>0
			)
	  	GROUP BY {sqlOutGroup}
	  	ORDER BY {sqlOutGroup}
		) a
	right join
		(SELECT 
			{sqlField}
			,count(distinct({dimension})) as register_user_count
		FROM
			{CKTable} p 
			{sqlJoin}
		WHERE
			{sqlWhere}
			and event='register'
		GROUP BY {sqlGroup}
		ORDER BY {sqlGroup}
		) b
	ON {sqlABJoinOn}
	GROUP BY {sqlOutGroup}
	ORDER BY {sqlOutGroup}
`)

var NewAddPayRateColumnIndex = ""
var NewAddPayRateColumnName = "新增付费率"

// 探索-新增付费率---新增付费用户数（新增用户中首次付费的人数）/新增用户数（筛选时间段范围内的新增用户数）注册用户数
func ExploreNewAddPayRate(exploreHelper *ExploreHelper) (result ResultExplore, err error) {

	// 初始化
	result = ExploreInitData(exploreHelper)

	// 构建sql
	exploreHelper.Sql = gstring.BytesToString(NewAddPayRateSql)
	ExploreBuildSql(exploreHelper)

	// 执行sql
	if err = ExploreRunSql(exploreHelper); err != nil {
		return
	}

	// 构建数据
	result.Y = ExploreBuildOneColumnData(NewAddPayRateColumnName, exploreHelper)

	// 列指标
	result.ColumnIndex = []string{NewAddPayRateColumnIndex}

	// 列名称
	result.Indicators = ExploreBuildOneIndicators(NewAddPayRateColumnName, exploreHelper)

	return
}


import (
	"git.code.tencent.com/liuzhenqiang/ghgame_framework/util/gstring"
)

var PayUserCountSql = []byte(`
	SELECT 
		{sqlField}
		,count(distinct({dimension})) as number
	FROM
		{CKTable} p 
		{sqlJoin}
	WHERE
		{sqlWhere}
		and event='deliver_goods'
	GROUP BY {sqlGroup}
	ORDER BY {sqlGroup}
`)

var PayUserCountColumnIndex = "pay_user_count"
var PayUserCountColumnName = "付费玩家数"

// 探索-付费玩家数
func ExplorePayUserCount(exploreHelper *ExploreHelper) (result ResultExplore, err error) {

	// 初始化
	result = ExploreInitData(exploreHelper)

	// 构建sql
	exploreHelper.Sql = gstring.BytesToString(PayUserCountSql)
	ExploreBuildSql(exploreHelper)

	// 执行sql
	ExploreRunSql(exploreHelper)

	// 构建数据
	result.Y = ExploreBuildOneColumnData(PayUserCountColumnName, exploreHelper)

	// 列指标
	result.ColumnIndex = []string{PayUserCountColumnIndex}

	// 列名称
	result.Indicators = ExploreBuildOneIndicators(PayUserCountColumnName, exploreHelper)

	return
}

// 付费玩家数
func GetPayUserIdListSql(userHelper UserListHelper) (sql string) {
	return "SELECT DISTINCT({dimension}) FROM " + GetCkTableByGameId(userHelper.GameId) + " p " + userHelper.BuildJoin +
		" WHERE event='deliver_goods' " + userHelper.BuildWhere
}

import (
	"archive/zip"
	"context"
	"encoding/csv"
	"encoding/json"
	"errors"
	"io"
	"math"
	"os"
	"path/filepath"
	"strings"
	"time"
	"wt/econ/api/app/provider/public"

	"git.code.tencent.com/liuzhenqiang/ghgame_framework/contract"
	"git.code.tencent.com/liuzhenqiang/ghgame_framework/gin"
	"git.code.tencent.com/liuzhenqiang/ghgame_framework/util/gslice"
	"gitee.com/golang-module/carbon/v2"
	"github.com/go-redis/redis/v8"
	"github.com/shopspring/decimal"
	"github.com/spf13/cast"
	"gorm.io/gorm"
)

const ExportDir = "./storage/export/"

var PaymentSituationDefaultGrouping = "[{\"label\":\"购买产品(礼包)名称\",\"labelEn\":\"payment_name\",\"descIcon\":\"\",\"dataType\":\"文本\",\"dataTypeEn\":\"text\",\"type\":1,\"queryType\":1,\"descText\":\"预制属性\",\"isCollection\":false,\"isHistory\":false,\"infoData\":{\"id\":1,\"remarks\":\"\",\"attributeType\":\"预制属性\",\"attributeName\":\"pay_currency\",\"displayName\":\"支付币种\",\"dataType\":\"文本\",\"number\":0,\"subject\":\"\",\"timeZone\":\"\",\"updateTime\":\"\",\"createUser\":\"\"},\"disabled\":false,\"id\":0,\"index\":0,\"valueType\":1,\"value\":[],\"hasOption\":false}]"
var ChannelRegisterDefaultGrouping = "[{\"label\":\"登录方式\",\"labelEn\":\"platform\",\"descIcon\":\"\",\"dataType\":\"文本\",\"dataTypeEn\":\"text\",\"type\":1,\"queryType\":1,\"descText\":\"预制属性\",\"isCollection\":false,\"isHistory\":false,\"infoData\":{\"id\":1,\"remarks\":\"\",\"attributeType\":\"预制属性\",\"attributeName\":\"pay_currency\",\"displayName\":\"支付币种\",\"dataType\":\"文本\",\"number\":0,\"subject\":\"\",\"timeZone\":\"\",\"updateTime\":\"\",\"createUser\":\"\"},\"disabled\":false,\"id\":0,\"index\":0,\"valueType\":1,\"value\":[],\"hasOption\":false},{\"label\":\"系统\",\"labelEn\":\"system\",\"descIcon\":\"\",\"dataType\":\"文本\",\"dataTypeEn\":\"text\",\"type\":1,\"queryType\":1,\"descText\":\"预制属性\",\"isCollection\":false,\"isHistory\":false,\"infoData\":{\"id\":1,\"remarks\":\"\",\"attributeType\":\"预制属性\",\"attributeName\":\"pay_currency\",\"displayName\":\"支付币种\",\"dataType\":\"文本\",\"number\":0,\"subject\":\"\",\"timeZone\":\"\",\"updateTime\":\"\",\"createUser\":\"\"},\"disabled\":false,\"id\":0,\"index\":0,\"valueType\":1,\"value\":[],\"hasOption\":false}]"
var FirstPaySituationDefaultGrouping = "[{\"label\":\"购买产品(礼包)名称\",\"labelEn\":\"payment_name\",\"descIcon\":\"\",\"dataType\":\"文本\",\"dataTypeEn\":\"text\",\"type\":1,\"queryType\":1,\"descText\":\"预制属性\",\"isCollection\":false,\"isHistory\":false,\"infoData\":{\"id\":1,\"remarks\":\"\",\"attributeType\":\"预制属性\",\"attributeName\":\"pay_currency\",\"displayName\":\"支付币种\",\"dataType\":\"文本\",\"number\":0,\"subject\":\"\",\"timeZone\":\"\",\"updateTime\":\"\",\"createUser\":\"\"},\"disabled\":false,\"id\":0,\"index\":0,\"valueType\":1,\"value\":[],\"hasOption\":false}]"
var AccumulatedRankingDefaultGrouping = "[{\"label\":\"账号ID\",\"labelEn\":\"uid\",\"descIcon\":\"icon-wenben\",\"dataType\":\"文本\",\"dataTypeEn\":\"text\",\"type\":1,\"descText\":\"预制属性\",\"isCollection\":false,\"isHistory\":false,\"infoData\":{\"id\":32,\"remarks\":\"\",\"attributeType\":\"预制属性\",\"attributeName\":\"uid\",\"displayName\":\"账号ID\",\"dataType\":\"文本\",\"number\":0,\"subject\":\"\",\"timeZone\":\"\",\"updateTime\":\"\",\"createUser\":\"\",\"labelId\":\"32\"},\"id\":0,\"index\":0,\"valueType\":1,\"value\":[],\"hasOption\":false}]"
var LtvDefaultGrouping = "[{\"dataType\":\"文本\",\"dataTypeEn\":\"text\",\"descIcon\":\"icon-wenben\",\"descText\":\"预制属性\",\"hasOption\":false,\"id\":0,\"index\":0,\"infoData\":{\"attributeName\":\"platform\",\"attributeType\":\"预制属性\",\"createUser\":\"\",\"dataType\":\"文本\",\"displayName\":\"登录方式\",\"id\":24,\"labelId\":\"24\",\"number\":0,\"remarks\":\"\",\"subject\":\"\",\"timeZone\":\"\",\"updateTime\":\"\"},\"isCollection\":false,\"isHistory\":false,\"label\":\"注册渠道\",\"labelEn\":\"platform\",\"type\":1,\"value\":[],\"valueType\":1}]"
var AdjustDefaultGrouping = "[{\"label\":\"操作系统\",\"labelEn\":\"system\",\"descIcon\":\"icon-wenben\",\"dataType\":\"文本\",\"dataTypeEn\":\"text\",\"type\":1,\"descText\":\"预制属性\",\"isCollection\":false,\"isHistory\":false,\"infoData\":{\"id\":26,\"remarks\":\"\",\"attributeType\":\"预制属性\",\"attributeName\":\"system\",\"displayName\":\"操作系统\",\"dataType\":\"文本\",\"dataTypeEn\":\"text\",\"number\":0,\"subject\":\"\",\"timeZone\":\"\",\"updateTime\":\"\",\"createUser\":\"\",\"labelId\":\"26\"},\"id\":0,\"index\":0,\"valueType\":1,\"value\":[],\"hasOption\":false}]"
var FirebaseDefaultGrouping = "[{\"label\":\"操作系统\",\"labelEn\":\"system\",\"descIcon\":\"icon-wenben\",\"dataType\":\"文本\",\"dataTypeEn\":\"text\",\"type\":1,\"descText\":\"预制属性\",\"isCollection\":false,\"isHistory\":false,\"infoData\":{\"id\":26,\"remarks\":\"\",\"attributeType\":\"预制属性\",\"attributeName\":\"system\",\"displayName\":\"操作系统\",\"dataType\":\"文本\",\"dataTypeEn\":\"text\",\"number\":0,\"subject\":\"\",\"timeZone\":\"\",\"updateTime\":\"\",\"createUser\":\"\",\"labelId\":\"26\"},\"id\":0,\"index\":0,\"valueType\":1,\"value\":[],\"hasOption\":false}]"
var ActiveUserChannelGrouping = "[{\"dataType\":\"文本\",\"dataTypeEn\":\"text\",\"descIcon\":\"icon-wenben\",\"descText\":\"预制属性\",\"hasOption\":false,\"id\":0,\"index\":0,\"infoData\":{\"attributeName\":\"platform\",\"attributeType\":\"预制属性\",\"createUser\":\"\",\"dataType\":\"文本\",\"displayName\":\"登录方式\",\"id\":24,\"labelId\":\"24\",\"number\":0,\"remarks\":\"\",\"subject\":\"\",\"timeZone\":\"\",\"updateTime\":\"\"},\"isCollection\":false,\"isHistory\":false,\"label\":\"登录方式\",\"labelEn\":\"platform\",\"type\":1,\"value\":[],\"valueType\":1}]"

var FirebaseDefaultCondition = "{\"relation\":\"\",\"list\":[{\"relation\":\"且\",\"list\":[{\"condition\":{\"label\":\"注册渠道\",\"labelEn\":\"platform\",\"descIcon\":\"icon-wenben\",\"dataType\":\"文本\",\"dataTypeEn\":\"text\",\"type\":1,\"descText\":\"预制属性\",\"isCollection\":false,\"isHistory\":false,\"infoData\":{\"id\":24,\"remarks\":\"\",\"attributeType\":\"预制属性\",\"attributeName\":\"platform\",\"displayName\":\"注册渠道\",\"dataType\":\"文本\",\"number\":0,\"subject\":\"\",\"timeZone\":\"\",\"updateTime\":\"\",\"createUser\":\"\",\"labelId\":\"24\"}},\"filter\":{\"icon\":\"icon-dengyu1\",\"label\":\"等于\",\"filter\":\"=\",\"info\":\"\",\"desc\":\"等于：属性值等于任一设定值\",\"edition\":1,\"date\":\"\",\"value\":\"Facebook\"}}]}]}"

type ExportHelper struct {
	GameId        string
	ByTime        string
	StartDate     string
	EndDate       string
	Condition     string
	Grouping      string
	Modular       string
	Panel         string
	Filename      string
	UserId        int
	RetainedCount int
	Dimension     string
}

func GetExportData(result ResultExplore) (returnDataList [][]string) {
	if len(result.UnionGroups) > 100 {
		result.UnionGroups = result.UnionGroups[0:100]
	}
	var titleList []string
	var dataList [][]string
	// 标题
	titleList = append(titleList, "日期")
	titleList = append(titleList, result.GroupLabel...)
	titleList = append(titleList, result.Indicators...)

	yList := result.Y.([]map[string][]ResultExploreYList)
	// 数据
	for dateKey, dateItem := range result.X {
		if len(result.UnionGroups) == 0 {
			result.UnionGroups = append(result.UnionGroups, []string{"总体"})
		}
		for groupKey, groupItem := range result.UnionGroups {
			tempDataList := make([]string, 0)
			tempDataList = append(tempDataList, dateItem)
			for _, group := range groupItem {
				if group != "总体" {
					tempDataList = append(tempDataList, group)
				}
			}
			for key, IndicatorsValue := range result.Indicators {
				// 某列【注册用户数】
				for _, yItem := range yList[key] {
					tempValue := yItem[groupKey].Values[dateKey]
					if gslice.ContainString(PercentColumnArr, IndicatorsValue) && (tempValue != "" || tempValue != "0" || tempValue != "0.00") {
						tempString, _ := decimal.NewFromString(cast.ToString(cast.ToFloat64(tempValue) * 100))
						if  !tempString.IsZero(){
							tempValue = tempString.StringFixed(2) + "%"
						}
					}
					tempDataList = append(tempDataList, tempValue)
				}
			}
			dataList = append(dataList, tempDataList)
		}

	}
	returnDataList = append(returnDataList, titleList)
	returnDataList = append(returnDataList, dataList...)
	return
}
func GetExportDataLtv(result ResultExplore) (returnDataList [][]string) {
	if len(result.UnionGroups) > 100 {
		result.UnionGroups = result.UnionGroups[0:100]
	}
	var titleList []string
	var dataList [][]string
	// 标题
	titleList = append(titleList, "日期")
	titleList = append(titleList, result.GroupLabel...)
	titleList = append(titleList, "注册用户数")
	for key, _ := range result.Indicators[1:] {
		titleList = append(titleList, "第"+cast.ToString(key)+"天充值")
		titleList = append(titleList, "LTV"+cast.ToString(key))
	}

	yList := result.Y.([][]map[string][]ResultExploreYList)

	for _, itemIndex := range yList[0] {
		for itemKey, itemValue := range itemIndex {
			for _, value := range itemValue {
				tempDataList := make([]string, 0)
				// 日期
				tempDataList = append(tempDataList, itemKey)

				// 分组项
				for _, group := range value.GroupCols {
					if group != "总体" {
						tempDataList = append(tempDataList, group)
					} else {
						for i := 0; i < len(result.GroupLabel); i++ {
							tempDataList = append(tempDataList, "总体")
						}
					}
				}
				// 注册用户数
				tempDataList = append(tempDataList, value.Values[0])

				for key, _ := range result.Indicators[1:] {
					// 充值金额
					tempDataList = append(tempDataList, value.ExtendValues[key+1])
					// ltv
					tempLtv := value.Values[key+1]
					if tempLtv == "" {
						tempLtv = "0"
					}
					tempDataList = append(tempDataList, tempLtv)
				}
				dataList = append(dataList, tempDataList)
			}
		}
	}

	returnDataList = append(returnDataList, titleList)
	returnDataList = append(returnDataList, dataList...)
	return
}

func GetExportDataRetention(result ResultExplore, indexList []string) (returnDataList [][]string) {
	if len(result.UnionGroups) > 100 {
		result.UnionGroups = result.UnionGroups[0:100]
	}
	var titleList []string
	var dataList [][]string
	// 标题
	titleList = append(titleList, "日期")
	titleList = append(titleList, result.GroupLabel...)

	titleList = append(titleList, "指标")
	titleList = append(titleList, result.Indicators...)

	yList := result.Y.([][]map[string][]ResultExploreYList)

	for _, itemIndex := range yList[0] {
		for itemKey, itemValue := range itemIndex {
			for _, value := range itemValue {
				for indexKey, indexName := range indexList {
					tempDataList := make([]string, 0)
					tempDataList = append(tempDataList, itemKey)
					for _, group := range value.GroupCols {
						if group != "总体" {
							tempDataList = append(tempDataList, group)
						} else {
							for i := 0; i < len(result.GroupLabel); i++ {
								tempDataList = append(tempDataList, "")
							}
						}
					}
					if indexName == "" {
						tempDataList = append(tempDataList, value.Values...)
					} else {
						tempDataList = append(tempDataList, indexName)
						if indexKey == 0 {
							tempDataList = append(tempDataList, value.Values...)
						} else if indexKey == 1 {
							// 添加%
							for _, percentValue := range value.PercentValues {
								tempPercentValue := percentValue + "%"
								if percentValue == "-" {
									tempPercentValue = "-"
								}
								tempDataList = append(tempDataList, tempPercentValue)
							}
						} else if indexKey == 2 && value.OtherValues != nil {
							// ltv
							tempDataList = append(tempDataList, value.OtherValues...)
						}

					}
					dataList = append(dataList, tempDataList)
				}
			}
		}
	}

	returnDataList = append(returnDataList, titleList)
	returnDataList = append(returnDataList, dataList...)
	return
}
func GetExportDataGroup(result ResultExplore, otherList []string) (returnDataList [][]string) {
	if len(result.UnionGroups) > 100 {
		result.UnionGroups = result.UnionGroups[0:100]
	}
	var titleList []string
	var dataList [][]string
	// 标题
	titleList = append(titleList, "日期")
	titleList = append(titleList, otherList...)
	titleList = append(titleList, result.GroupLabel...)

	titleList = append(titleList, result.Indicators...)

	yList := result.Y.([]map[string][]ResultExploreYList)

	for _, itemIndex := range yList {
		for itemKey, itemValue := range itemIndex {
			for _, value := range itemValue {
				tempDataList := make([]string, 0)
				tempDataList = append(tempDataList, itemKey)

				for _, group := range value.GroupCols {
					if group != "总体" {
						tempDataList = append(tempDataList, group)
					} else {
						for i := 0; i < len(result.GroupLabel); i++ {
							tempDataList = append(tempDataList, "")
						}
					}
				}
				tempDataList = append(tempDataList, value.Values...)

				dataList = append(dataList, tempDataList)

			}
		}
	}

	returnDataList = append(returnDataList, titleList)
	returnDataList = append(returnDataList, dataList...)
	return
}

// 默认分组
func getDefaultCondition(exportHelper ExportHelper) (condition string) {
	if exportHelper.Modular == "firebase" {
		return FirebaseDefaultCondition
	}
	return
}

// 默认分组
func getDefaultGrouping(exportHelper ExportHelper) (grouping string) {
	if exportHelper.Modular == "paymentSituation" {
		return PaymentSituationDefaultGrouping
	}
	// 渠道新增用户数
	if exportHelper.Modular == "channelRegister" {
		return ChannelRegisterDefaultGrouping
	}
	// 首充购买情况
	if exportHelper.Modular == "firstPaySituation" {
		return FirstPaySituationDefaultGrouping
	}

	// 累充排名
	if exportHelper.Modular == "accumulatedRanking" {
		return AccumulatedRankingDefaultGrouping
	}
	// ltv
	if exportHelper.Modular == "ltv" {
		return LtvDefaultGrouping
	}
	// adjust
	if exportHelper.Modular == "adjust" {
		return AdjustDefaultGrouping
	}
	// firebase
	if exportHelper.Modular == "firebase" {
		return FirebaseDefaultGrouping
	}
	// firebase
	if exportHelper.Modular == "activeUserChannel" {
		return ActiveUserChannelGrouping
	}
	return
}

// 默认时间维度
func getDefaultByTime(exportHelper ExportHelper) (byTime string) {
	// 周活跃用户数
	if exportHelper.Modular == "weekActiveUser" {
		return "byWeek"
	}
	// 月活跃用户数
	if exportHelper.Modular == "monthActiveUser" {
		return "byMonth"
	}
	// 当月充值总额
	if exportHelper.Modular == "thisMonthRecharge" {
		return "byMonth"
	}
	// 周登录天数分布
	if exportHelper.Modular == "weekLogin" {
		return "byWeek"
	}
	return "byDay"
}

// 默认开始时间结束时间
func getDefaultStartEndDate(exportHelper ExportHelper) (startDate, endDate string) {

	if gslice.ContainString([]string{
		"register",          // 注册用户数
		"active",            // 活跃用户数
		"thisMonthRecharge", // 当月充值总额
		"rechargeTotal",     // 充值总额

		"activeUser",      // 活跃用户数
		"oldActiveUser",   // 活跃老玩家数
		"weekActiveUser",  // 周活跃用户数
		"monthActiveUser", // 月活跃用户数
	}, exportHelper.Modular) {
		return exportHelper.EndDate, exportHelper.EndDate
	}

	return exportHelper.StartDate, exportHelper.EndDate
}
func (s *PanelService) ExportCsv(ctx *gin.Context, exportHelper ExportHelper) (filename string, err error) {
	exportHelper.StartDate, exportHelper.EndDate = getDefaultStartEndDate(exportHelper)
	exportHelper.Grouping = getDefaultGrouping(exportHelper)
	exportHelper.Condition = getDefaultCondition(exportHelper)
	exportHelper.ByTime = getDefaultByTime(exportHelper)

	filename = GetCsvFilename(exportHelper.Dimension, exportHelper.Filename, exportHelper.StartDate, exportHelper.EndDate)
	// 文件是否存在
	if b, _ := FileExists(filename); b == true {
		return
	}
	var result ResultExplore
	if exportHelper.Panel == "core" {
		explore := &RequestCorePanelExplore{
			GameId:        exportHelper.GameId,
			ByTime:        exportHelper.ByTime,
			StartDate:     exportHelper.StartDate,
			EndDate:       exportHelper.EndDate,
			Condition:     exportHelper.Condition,
			Grouping:      exportHelper.Grouping,
			Modular:       exportHelper.Modular,
			UserId:        exportHelper.UserId,
			RetainedCount: exportHelper.RetainedCount,
			Dimension:     exportHelper.Dimension,
		}
		result, err = s.GetColePanelExploreData(ctx, explore)
	}
	if exportHelper.Panel == "pay" {
		explore := &RequestPayPanelExplore{
			GameId:        exportHelper.GameId,
			ByTime:        exportHelper.ByTime,
			StartDate:     exportHelper.StartDate,
			EndDate:       exportHelper.EndDate,
			Condition:     exportHelper.Condition,
			Grouping:      exportHelper.Grouping,
			Modular:       exportHelper.Modular,
			UserId:        exportHelper.UserId,
			RetainedCount: exportHelper.RetainedCount,
			Dimension:     exportHelper.Dimension,
		}
		result, err = s.GetPayPanelExploreData(ctx, explore)
	}
	if exportHelper.Panel == "active" {
		explore := &RequestActivePanelExplore{
			GameId:        exportHelper.GameId,
			ByTime:        exportHelper.ByTime,
			StartDate:     exportHelper.StartDate,
			EndDate:       exportHelper.EndDate,
			Condition:     exportHelper.Condition,
			Grouping:      exportHelper.Grouping,
			Modular:       exportHelper.Modular,
			UserId:        exportHelper.UserId,
			RetainedCount: exportHelper.RetainedCount,
			Dimension:     exportHelper.Dimension,
		}
		result, err = s.GetActivePanelExploreData(ctx, explore)
	}
	if err != nil {
		return
	}
	var dataList [][]string
	if gslice.ContainString([]string{"ltv"}, exportHelper.Modular) {
		dataList = GetExportDataLtv(result)
	} else if gslice.ContainString([]string{"retained"}, exportHelper.Modular) {
		indexList := []string{"留存人数", "留存率"}
		dataList = GetExportDataRetention(result, indexList)
	} else if gslice.ContainString([]string{"weekLogin", "accumulateDistribution", "onlineDuration"}, exportHelper.Modular) {
		var otherList []string
		switch exportHelper.Modular {
		case "weekLogin":
			otherList = []string{"全部用户"}
			break
		case "accumulateDistribution":
			otherList = []string{"全部用户"}
			break
		case "onlineDuration":
			otherList = []string{"全部用户"}
			break
		default:
			break
		}
		dataList = GetExportDataGroup(result, otherList)
	} else {
		dataList = GetExportData(result)
	}
	CreateCsvFile(filename, dataList)
	return
}
func FileExists(path string) (bool, error) {
	_, err := os.Stat(path)
	if err == nil {
		return true, nil
	}
	if os.IsNotExist(err) {
		return false, nil
	}
	return false, err
}

// 格式/2023-01/维度/2023-01-02-13/注册用户注册数_20230101_20230102.csv
func GetCsvFilename(dimension, modular string, startDate, endDate string) (filename string) {
	return ExportDir + time.Now().Format("2006-01") + "/" + dimension + "/" + time.Now().Format("2006-01-02-15") + "/" + modular + "_" + strings.ReplaceAll(startDate, "-", "") + "_" + strings.ReplaceAll(endDate, "-", "") + ".csv"
}

func CreateCsvFile(filename string, dataList [][]string) (err error) {
	// 创建目录
	if err = PathIsExistOrCreate(filepath.Dir(filename)); err != nil {
		return
	}
	// 存在删除
	if b, _ := FileExists(filename); b == true {
		err = os.Remove(filename)
		return err
	}
	file, err := os.OpenFile(filename, os.O_RDWR|os.O_CREATE, 0766)
	if err != nil {
		return
	}
	if _, err = file.WriteString("\xEF\xBB\xBF"); err != nil {
		return
	}
	csvWriter := csv.NewWriter(file)
	for _, value := range dataList {
		csvWriter.Write(value)
	}
	csvWriter.Flush()
	defer file.Close()
	return
}

// 删除规则 删除上5个月的所有文件
func RemoveCsvFile() {
	for i := 1; i <= 5; i++ {
		dirname := carbon.Now().SubMonthsNoOverflow(i).Format("Y-m")
		os.RemoveAll(ExportDir + dirname)
	}
}

func PathIsExistOrCreate(path string) error {
	if isExist(path) {
		return nil
	}
	err := os.MkdirAll(path, os.ModePerm)
	if err != nil {
		return err
	}
	return nil
}

func isExist(path string) bool {
	_, err := os.Stat(path)
	if err != nil {
		if os.IsExist(err) {
			return true
		}
		if os.IsNotExist(err) {
			return false
		}
		return false
	}
	return true
}

func CreateZip(zipName string, fileList []string) (zipFilename string, err error) {
	zipFilePath := ExportDir + "zip/"
	err = PathIsExistOrCreate(zipFilePath)
	if err != nil {
		return "", errors.New("目录创建失败")
	}
	zipFilename = zipFilePath + zipName
	zipFile, err := os.Create(zipFilename)
	if err != nil {
		return
	}
	defer zipFile.Close()
	zipWriter := zip.NewWriter(zipFile)
	for _, filename := range fileList {
		fr, err1 := os.Open(filename)
		if err1 != nil {
			return "", err1
		}
		_, baseFilename := filepath.Split(filename)
		writer, err2 := zipWriter.Create(baseFilename)
		if err2 != nil {
			return "", errors.New("文件创建失败")
		}
		if _, err3 := io.Copy(writer, fr); err3 != nil {
			return "", errors.New("文件写入失败")
		}
	}
	zipWriter.Flush()
	zipWriter.Close()
	return
}

type FileTask struct {
	TaskId   string  `json:"taskId" `
	Filename string  `json:"filename" `
	Rate     float64 `json:"rate" `
}

type FileTaskHelper struct {
	Db            *gorm.DB
	RedisDb       *redis.Client
	CkDb          *gorm.DB
	Log           contract.Log
	Ctx           *gin.Context
	Config        contract.Config
	GameId        string
	UserId        int
	Filename      string
	UserIdListSql string
	Modular       string
	TaskId        string
	Dimension     string
}

// 创建文件任务

const TaskPageSize = 1000
const TaskCacheKey = "download_key"

func GetCacheKey() (cacheKey string) {
	return TaskCacheKey + "_" + time.Now().Format("2006-01")
}

// 文件生成
func FileBuild(fileTaskHelper *FileTaskHelper) (fileTask FileTask, err error) {
	if fileTaskHelper.TaskId != "" {
		return FileBuildProgress(fileTaskHelper.TaskId, fileTaskHelper.RedisDb)
	}
	dimension := fileTaskHelper.Dimension
	if dimension == "" {
		dimension = "uid"
	}
	// 维度替换
	fileTaskHelper.UserIdListSql = strings.ReplaceAll(fileTaskHelper.UserIdListSql, "{dimension}", dimension)

	taskId := public.UniqueId()
	filename := ExportDir + time.Now().Format("2006-01/") + taskId + "/" + fileTaskHelper.Filename
	// 创建目录
	if err = PathIsExistOrCreate(filepath.Dir(filename)); err != nil {
		return
	}
	// 存在删除
	if b, _ := FileExists(filename); b == true {
		if err = os.Remove(filename); err != nil {
			return
		}
	}
	file, err := os.OpenFile(filename, os.O_RDWR|os.O_CREATE, 0766)
	if err != nil {
		return
	}
	if _, err = file.WriteString("\xEF\xBB\xBF"); err != nil {
		return
	}
	// 创建文件流
	csvWriter := csv.NewWriter(file)

	// 获取表头
	var headerList, fieldList []string
	var count int64
	if fileTaskHelper.Modular == "panel_user_list" {
		headerList, fieldList, err = GetUserListHeaderList(fileTaskHelper.Ctx, cast.ToString(fileTaskHelper.UserId), fileTaskHelper.GameId, fileTaskHelper.Db, fileTaskHelper.Log, fileTaskHelper.Config)
		if err != nil {
			fileTaskHelper.Log.Error(fileTaskHelper.Ctx, "GetUserListHeaderList 执行出错", map[string]interface{}{"err": err})
			return
		}
		count, err = GetUserListCount(fileTaskHelper.GameId, fileTaskHelper.UserIdListSql, dimension, fileTaskHelper.CkDb)
		if err != nil {
			fileTaskHelper.Log.Error(fileTaskHelper.Ctx, "GetUserListCount 执行出错", map[string]interface{}{"err": err})
			return
		}
	}

	fileTask.Filename = filename
	fileTask.Rate = 0
	fileTask.TaskId = taskId
	csvWriter.Write(headerList)
	csvWriter.Flush()

	if count <= 0 {
		fileTask.Rate = 100
		bytes, _ := json.Marshal(&fileTask)
		err = fileTaskHelper.RedisDb.HSet(fileTaskHelper.Ctx, GetCacheKey(), taskId, bytes).Err()
		if err != nil {
			fileTaskHelper.Log.Error(fileTaskHelper.Ctx, "FileBuild err1", map[string]interface{}{"err": err})
			return
		}

	} else {
		go func() {
			// 分页读取
			pageTotal := math.Ceil(float64(count) / float64(TaskPageSize))
			for i := 1; i <= int(pageTotal); i++ {
				var dataAllList [][]string
				if fileTaskHelper.Modular == "panel_user_list" {
					dataAllList, err = GetUserListByPage(fileTaskHelper.GameId, dimension, (i-1)*TaskPageSize, TaskPageSize, fileTaskHelper.UserIdListSql, fileTaskHelper.CkDb, fieldList)
				}
				if err != nil {
					fileTaskHelper.Log.Error(fileTaskHelper.Ctx, "执行出错", map[string]interface{}{"err": err})
					return
				}
				csvWriter.WriteAll(dataAllList)
				rate := fileTask.Rate + math.Ceil(100/cast.ToFloat64(pageTotal))
				if rate > 100 {
					rate = 100
				}
				fileTask.Rate = rate
				bytes, _ := json.Marshal(&fileTask)
				err = fileTaskHelper.RedisDb.HSet(fileTaskHelper.Ctx, GetCacheKey(), taskId, bytes).Err();
				if err != nil {
					fileTaskHelper.Log.Error(fileTaskHelper.Ctx, "FileBuild err", map[string]interface{}{"err": err})
					return
				}
			}
			defer file.Close()
		}()
	}
	return
}

// 文件生成进度
func FileBuildProgress(taskId string, redisDb *redis.Client) (fileTask FileTask, err error) {
	res := redisDb.HGet(context.Background(), GetCacheKey(), taskId)
	if res.Err() != nil {
		return
	}
	err = json.Unmarshal([]byte(res.Val()), &fileTask)
	defer removeCache(redisDb)
	return
}

// 删除缓存
func removeCache(redisDb *redis.Client) {
	for i := 1; i <= 5; i++ {
		prefix := carbon.Now().SubMonthsNoOverflow(i).Format("Y-m")
		redisDb.Del(context.Background(), TaskCacheKey+"_"+prefix)
	}
}
